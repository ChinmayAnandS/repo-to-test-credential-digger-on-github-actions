name: Credential Security Scan

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [trunk, main, releases/*]
  push:
    branches: [trunk, main, releases/*]  # Optional: scan on direct pushes

env:
  PYTHON_VERSION: '3.11'
  SCAN_DB_PATH: '/tmp/credential-scan/scan.db'

jobs:
  credential-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential python3-dev sqlite3
        
    - name: Install Credential Digger
      run: |
        pip install --upgrade pip
        pip install credentialdigger
        
    - name: Create comprehensive rules
      run: |
        # Create comprehensive rules file with common credential patterns
        cat > comprehensive_rules.yml << 'EOF'
            - regex: (?i)(password|passwd|pwd)\s*[=:]\s*["\']([^"'\s]{8,})["\']
              category: password
              description: "Hardcoded password"

            - regex: (?i)(password|passwd|pwd)\s*[=:]\s*([^"'\s]{8,})
              category: password
              description: "Hardcoded password (unquoted)"

            - regex: (?i)password\s*[=:]\s*["\'][^"']*[0-9]+[^"']*["\']
              category: password
              description: "Password with numbers"

            - regex: (ghp|gho|ghu|ghs|ghr)_[A-Za-z0-9_]{36,255}
              category: token
              description: "GitHub Token"

            - regex: (?i)github[_-]?token\s*[=:]\s*["\']?([a-zA-Z0-9_-]{20,})["\']?
              category: token
              description: "GitHub Token (generic)"

            - regex: sk-[a-zA-Z0-9]{48}
              category: token
              description: "OpenAI API Key"

            - regex: r[0-9a-f]{32}
              category: token
              description: "Reddit API Key"

            - regex: xoxb-[0-9]{11,12}-[0-9]{11,12}-[a-zA-Z0-9]{24}
              category: token
              description: "Slack Bot Token"

            - regex: xoxp-[0-9]{11,12}-[0-9]{11,12}-[0-9]{11,12}-[a-zA-Z0-9]{32}
              category: token
              description: "Slack User Token"

            - regex: (?i)(api[_-]?key|apikey|access[_-]?token)\s*[=:]\s*["\']?([a-zA-Z0-9+/=_-]{20,})["\']?
              category: token
              description: "Generic API Key/Token"

            - regex: AKIA[0-9A-Z]{16}
              category: token
              description: "AWS Access Key ID"

            - regex: (?i)bearer\s+[a-zA-Z0-9+/=_-]{20,}
              category: token
              description: "Bearer Token"

            - regex: -----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----
              category: crypto_key
              description: "RSA Private Key"

            - regex: -----BEGIN\s+OPENSSH\s+PRIVATE\s+KEY-----
              category: crypto_key
              description: "OpenSSH Private Key"

            - regex: -----BEGIN\s+DSA\s+PRIVATE\s+KEY-----
              category: crypto_key
              description: "DSA Private Key"

            - regex: -----BEGIN\s+EC\s+PRIVATE\s+KEY-----
              category: crypto_key
              description: "EC Private Key"

            - regex: -----BEGIN\s+PGP\s+PRIVATE\s+KEY\s+BLOCK-----
              category: crypto_key
              description: "PGP Private Key"

            - regex: -----BEGIN\s+CERTIFICATE-----
              category: crypto_key
              description: "Certificate"
              
            - regex: (?i)aws[_-]?access[_-]?key[_-]?id\s*[=:]\s*["\']?([A-Z0-9]{20})["\']?
              category: other
              description: "AWS Access Key ID"

            - regex: (?i)aws[_-]?secret[_-]?access[_-]?key\s*[=:]\s*["\']?([a-zA-Z0-9+/]{40})["\']?
              category: other
              description: "AWS Secret Access Key"

            - regex: (?i)(database[_-]?url|db[_-]?url|connection[_-]?string)\s*[=:]\s*["\']?([a-zA-Z]+://[^\s"']+)["\']?
              category: other
              description: "Database Connection String"

            - regex: (?i)(mongodb|mongo)[_-]?uri\s*[=:]\s*["\']?(mongodb://[^\s"']+)["\']?
              category: other
              description: "MongoDB Connection String"

            - regex: postgres://[^\s"']+
              category: other
              description: "PostgreSQL Connection String"

            - regex: mysql://[^\s"']+
              category: other
              description: "MySQL Connection String"

            - regex: (?i)(jwt[_-]?secret|jwt[_-]?key)\s*[=:]\s*["\']?([a-zA-Z0-9+/=_-]{20,})["\']?
              category: other
              description: "JWT Secret"

            - regex: (?i)(secret[_-]?key|private[_-]?key)\s*[=:]\s*["\']?([a-zA-Z0-9+/=_-]{20,})["\']?
              category: other
              description: "Generic Secret Key"

            - regex: '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}'
              category: other
              description: "UUID (potential secret)"
            EOF
        cat comprehensive_rules.yml
        echo "‚úÖ Comprehensive rules created"

    - name: Get rules from credentialdigger repo
      run : |
        # Download the latest comprehensive rules from Credential Digger's repository
        curl -L -o standard_rules.yml https://github.com/SAP/credential-digger/raw/refs/heads/main/ui/backend/rules.yml
        cat comprehensive_rules.yml >> standard_rules.yml
        cat standard_rules.yml
        echo "‚úÖ Comprehensive rules downloaded"
        
    - name: Setup database and add rules
      run: |
        mkdir -p /tmp/credential-scan
        credentialdigger add_rules --sqlite ${{ env.SCAN_DB_PATH }} standard_rules.yml
        echo "‚úÖ Rules added to database"
        
    - name: Determine scan scope
      id: scope
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          # For PR, scan only changed files
          BASE_SHA=${{ github.event.pull_request.base.sha }}
          HEAD_SHA=${{ github.event.pull_request.head.sha }}
          git diff --name-only $BASE_SHA...$HEAD_SHA | grep -E '\.(py|js|ts|java|go|php|rb|cs|cpp|c|h|yml|yaml|json|xml|env|config|ini|properties|sh|bash)$' > changed_files.txt || true
          echo "scope=pr" >> $GITHUB_OUTPUT
        else
          # For push, scan all files (or recent commits)
          git log --name-only --pretty=format: -n 5 | grep -E '\.(py|js|ts|java|go|php|rb|cs|cpp|c|h|yml|yaml|json|xml|env|config|ini|properties|sh|bash)$' | sort -u > changed_files.txt || true
          echo "scope=push" >> $GITHUB_OUTPUT
        fi
        
        # Filter out binary files and common ignore patterns
        if [[ -f changed_files.txt ]]; then
          grep -v -E '\.(png|jpg|jpeg|gif|ico|svg|pdf|zip|tar|gz|exe|dll|so|dylib)$' changed_files.txt > filtered_files.txt || true
          mv filtered_files.txt changed_files.txt
        fi
        
        echo "Files to scan:"
        if [[ -f changed_files.txt ]]; then
          cat changed_files.txt
          echo "file_count=$(wc -l < changed_files.txt)" >> $GITHUB_OUTPUT
        else
          echo "No files found to scan"
          echo "file_count=0" >> $GITHUB_OUTPUT
        fi
        
    - name: Scan files for credentials
      id: scan
      run: |
        if [[ ! -f changed_files.txt ]] || [[ $(wc -l < changed_files.txt) -eq 0 ]]; then
          echo "No files to scan"
          echo "credentials_found=false" >> $GITHUB_OUTPUT
          echo "scan_results=No files found to scan" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Initialize variables
        CREDENTIALS_FOUND=false
        SCAN_RESULTS=""
        DETAILED_RESULTS=""
        TOTAL_FILES=0
        SCANNED_FILES=0
        
        # Create temp directory for scanning
        mkdir -p /tmp/individual-scans
        
        while IFS= read -r file; do
          if [[ -f "$file" ]]; then
            TOTAL_FILES=$((TOTAL_FILES + 1))
            echo "üîç Scanning: $file"
            
            # Copy file to temp location
            temp_file="/tmp/individual-scans/$(basename "$file")_$$"
            cp "$file" "$temp_file"
            
            # Perform scan with error handling
            SCAN_OUTPUT=""
            SCAN_EXIT_CODE=0
            
            SCAN_OUTPUT=$(credentialdigger scan_path "$temp_file" \
              --sqlite ${{ env.SCAN_DB_PATH }} \
              2>&1) || SCAN_EXIT_CODE=$?

            
            # Check for credentials
            if [[ $SCAN_EXIT_CODE -ne 0 ]]; then
              echo $SCAN_EXIT_CODE
              SCANNED_FILES=$((SCANNED_FILES + 1))
              CREDENTIALS_FOUND=true
              SCAN_RESULTS="$SCAN_RESULTS‚ùå **$file**: Potential credentials detected\n"
              DETAILED_RESULTS="$DETAILED_RESULTS\n### üö® $file\n\`\`\`\n$SCAN_OUTPUT\n\`\`\`\n"
              echo "::error file=$file::Potential credentials detected"
            else
              SCAN_RESULTS="$SCAN_RESULTS‚úÖ **$file**: Clean\n"
            fi
            
            # Cleanup
            rm -f "$temp_file"
          fi
        done < changed_files.txt
        
        # Generate summary
        SUMMARY="üìä **Scan Summary:**\n"
        SUMMARY="${SUMMARY}- Total files: $TOTAL_FILES\n"
        SUMMARY="${SUMMARY}- Successfully scanned: $SCANNED_FILES\n"
        SUMMARY="${SUMMARY}- Status: $([ "$CREDENTIALS_FOUND" = true ] && echo "üö® CREDENTIALS FOUND" || echo "‚úÖ CLEAN")\n"
        
        # Set outputs
        echo "credentials_found=$CREDENTIALS_FOUND" >> $GITHUB_OUTPUT
        echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
        echo "scanned_files=$SCANNED_FILES" >> $GITHUB_OUTPUT
        
        # Multi-line outputs
        {
          echo "scan_results<<EOF"
          echo -e "$SCAN_RESULTS"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        {
          echo "summary<<EOF"
          echo -e "$SUMMARY"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
        {
          echo "detailed_results<<EOF"
          echo -e "$DETAILED_RESULTS"
          echo "EOF"
        } >> $GITHUB_OUTPUT
        
    - name: Create check run
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const credentialsFound = '${{ steps.scan.outputs.credentials_found }}' === 'true';
          const conclusion = credentialsFound ? 'failure' : 'success';
          const status = 'completed';
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'Credential Security Scan',
            head_sha: context.sha,
            status: status,
            conclusion: conclusion,
            output: {
              title: credentialsFound ? 'üö® Credentials Detected' : '‚úÖ No Credentials Found',
              summary: `${{ steps.scan.outputs.summary }}`,
              text: `${{ steps.scan.outputs.detailed_results }}`
            }
          });
          
    - name: Comment on PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const credentialsFound = '${{ steps.scan.outputs.credentials_found }}' === 'true';
          const totalFiles = '${{ steps.scan.outputs.total_files }}';
          const scannedFiles = '${{ steps.scan.outputs.scanned_files }}';
          
          // Delete previous comments from this action
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          for (const comment of comments.data) {
            if (comment.user.login === 'github-actions[bot]' && 
                comment.body.includes('Credential Digger Security Scan')) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id,
              });
            }
          }
          
          const statusIcon = credentialsFound ? 'üö®' : '‚úÖ';
          const statusText = credentialsFound ? 'CREDENTIALS DETECTED' : 'SCAN COMPLETE - NO ISSUES';

          const fixInstructions = `
          1. **Remove Hardcoded Credentials** from your code.
          2. **Use Environment Variables** instead.
          3. **Use Github Secrets** for sensitive data.
          4. **Use files that are not tracked by git**
          5. **Consider using tools to store secrets** like vaults or secret management services.`;
          
          const body = `## ${statusIcon} Credential Digger Security Scan
          
          **Status:** ${statusText}
          
          ${{ steps.scan.outputs.summary }}
          
          ### File Results:
          ${{ steps.scan.outputs.scan_results }}
          
          ${credentialsFound ? 
            '### ‚ö†Ô∏è Action Required\n\nHardcoded credentials were detected in your changes. Please:\n\n1. Remove any hardcoded passwords, API keys, tokens, or secrets\n2. Use environment variables or secure secret management instead\n3. Consider using tools like \`git-secrets\` locally to prevent future issues\n\n**This PR cannot be merged until credentials are removed.**' : 
            '### ‚úÖ All Clear\n\nNo credentials detected in the changed files. Great job maintaining security best practices!'}
          
          ${{ steps.scan.outputs.detailed_results }}
          
          ---
          <details>
          <summary>üîß How to fix credential issues</summary>
          
          ${fixInstructions}
            
          </details>
          
          **Scanned ${scannedFiles}/${totalFiles} files in this PR**`;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });
          
    - name: Upload scan database (for debugging)
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: credential-scan-db
        path: /tmp/credential-scan/scan.db
        retention-days: 7
        
    - name: Fail build if credentials found
      if: steps.scan.outputs.credentials_found == 'true'
      run: |
        echo "::error title=Security Issue::Hardcoded credentials detected in PR"
        echo ""
        echo "üö® SECURITY ALERT: Hardcoded credentials were found in your changes!"
        echo ""
        echo "Files with issues:"
        echo "${{ steps.scan.outputs.scan_results }}"
        echo ""
        echo "Please remove all hardcoded credentials before merging this PR."
        echo "Use environment variables, GitHub secrets, or secure config management instead."
        echo ""
        exit 1
        
    - name: Success summary
      if: steps.scan.outputs.credentials_found == 'false'
      run: |
        echo "‚úÖ Security scan completed successfully!"
        echo "üìä Scanned ${{ steps.scan.outputs.scanned_files }} files"
        echo "üîí No credentials detected - your code is secure!"
